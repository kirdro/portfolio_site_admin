generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(dbgenerated("(gen_random_uuid())::text"))
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @db.Timestamptz(6)
  image         String?
  role          UserRole        @default(USER)
  accounts      Account[]
  AiChatMessage AiChatMessage[]
  ChatMessage   ChatMessage[]
  ContactForm   ContactForm[]
  Project       Project[]
  BlogPost      BlogPost[]
  sessions      Session[]
  files         files[]         @relation("files_uploadedByToUser")

  @@map("User")
}

model Account {
  id                       String  @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token])
  @@map("VerificationToken")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  demoUrl     String?
  githubUrl   String?
  tags        String[] @default([])
  featured    Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])

  @@index([featured, createdAt])
  @@map("Project")
}

model Skill {
  id       String  @id @default(cuid())
  name     String  @unique
  category String
  level    Int
  icon     String?

  @@index([category])
  @@map("Skill")
}

model ChatMessage {
  id          String   @id @default(cuid())
  content     String
  userId      String
  attachments String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@map("ChatMessage")
}

model AiChatMessage {
  id          String   @id @default(cuid())
  content     String
  userId      String
  isAI        Boolean  @default(false)
  modelName   String?
  attachments String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId])
  @@map("AiChatMessage")
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  status    String   @default("new")
  userId    String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])

  @@index([status, createdAt])
  @@map("ContactForm")
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  @@map("Settings")
}

model BlogPost {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     Json      // BlockNote JSON content
  excerpt     String?
  coverImage  String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  tags        BlogTag[]
  
  @@index([published, createdAt])
  @@index([slug])
  @@map("BlogPost")
}

model BlogTag {
  id    String     @id @default(cuid())
  name  String     @unique
  slug  String     @unique
  color String?    @default("#00FF99")
  posts BlogPost[]
  
  @@map("BlogTag")
}

model balance_transactions {
  id                String             @id
  amount            Float
  type              TransactionType
  description       String
  balanceBefore     Float
  balanceAfter      Float
  createdAt         DateTime           @default(now())
  userBalanceId     String
  billId            String?
  electricity_bills electricity_bills? @relation(fields: [billId], references: [id])
  user_balances     user_balances      @relation(fields: [userBalanceId], references: [id], onDelete: Cascade)
}

model electricity_bills {
  id                   String                 @id
  period               String
  totalConsumption     Float
  normalConsumption    Float
  excessConsumption    Float
  normalCost           Float
  excessCost           Float
  totalCost            Float
  calculatedAt         DateTime               @default(now())
  status               BillStatus             @default(CALCULATED)
  userId               String
  teamId               String?
  readingId            String                 @unique
  tariffId             String
  balance_transactions balance_transactions[]
  electricity_readings electricity_readings   @relation(fields: [readingId], references: [id])
  tariffs              tariffs                @relation(fields: [tariffId], references: [id])
  teams                teams?                 @relation(fields: [teamId], references: [id])
  users                users                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period])
}

model electricity_readings {
  id                String             @id
  currentReading    Float
  previousReading   Float?
  consumption       Float?
  readingDate       DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  userId            String
  teamId            String?
  tariffId          String
  electricity_bills electricity_bills?
  tariffs           tariffs            @relation(fields: [tariffId], references: [id])
  teams             teams?             @relation(fields: [teamId], references: [id])
  users             users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  files             files[]            @relation("ElectricityAttachment")
}

model files {
  id                            String                 @id
  size                          Int
  uploadedBy                    String
  createdAt                     DateTime               @default(now())
  mimeType                      String
  originalName                  String
  s3Key                         String                 @unique
  s3Url                         String
  updatedAt                     DateTime
  user_files_uploadedByToUser   User                   @relation("files_uploadedByToUser", fields: [uploadedBy], references: [id], onDelete: Cascade)
  electricity_readings          electricity_readings[] @relation("ElectricityAttachment")
  products                      products[]             @relation("ProductImage")
}

model products {
  id          String   @id
  name        String
  description String?
  price       Float
  category    String?
  quantity    Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  teamId      String?
  teams       teams?   @relation(fields: [teamId], references: [id])
  files       files[]  @relation("ProductImage")
}

model tariffs {
  id                   String                 @id
  name                 String
  description          String?
  normalRate           Float
  excessRate           Float
  normalLimit          Int
  effectiveFrom        DateTime
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  normalLimitPerPerson Float                  @default(150)
  electricity_bills    electricity_bills[]
  electricity_readings electricity_readings[]
}

model task_projects {
  id          String       @id
  teamId      String
  name        String
  description String?
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  users       users        @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  teams       teams        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  time_tasks  time_tasks[]

  @@index([name])
  @@index([teamId])
}

model teams {
  id                    String                 @id
  name                  String                 @unique
  description           String?
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  registeredPeopleCount Int                    @default(1)
  normalLimitPerPerson  Float                  @default(150)
  electricity_bills     electricity_bills[]
  electricity_readings  electricity_readings[]
  products              products[]
  task_projects         task_projects[]
  time_entries          time_entries[]
  time_tasks            time_tasks[]
  user_balances         user_balances[]
  users                 users[]
}

model time_entries {
  id              String     @id
  teamId          String
  timeTaskId      String
  userId          String
  startTime       DateTime
  endTime         DateTime?
  durationSeconds Int?
  note            String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime
  teams           teams      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  time_tasks      time_tasks @relation(fields: [timeTaskId], references: [id], onDelete: Cascade)
  users           users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([endTime])
  @@index([teamId, startTime])
  @@index([timeTaskId])
  @@index([userId])
}

model time_tasks {
  id            String         @id
  teamId        String
  taskProjectId String?
  title         String
  description   String?
  status        TimeTaskStatus @default(ACTIVE)
  createdBy     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  time_entries  time_entries[]
  users         users          @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  task_projects task_projects? @relation(fields: [taskProjectId], references: [id])
  teams         teams          @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([taskProjectId])
  @@index([teamId])
}

model user_balances {
  id                   String                 @id
  currentBalance       Float                  @default(0)
  lastUpdated          DateTime
  createdAt            DateTime               @default(now())
  userId               String                 @unique
  teamId               String?
  balance_transactions balance_transactions[]
  teams                teams?                 @relation(fields: [teamId], references: [id])
  users                users                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                            String                 @id
  email                         String                 @unique
  password                      String
  firstName                     String?
  lastName                      String?
  role                          Role                   @default(USER)
  isActive                      Boolean                @default(true)
  createdAt                     DateTime               @default(now())
  updatedAt                     DateTime
  teamId                        String?
  avatarId                      String?
  electricity_bills             electricity_bills[]
  electricity_readings          electricity_readings[]
  task_projects                 task_projects[]
  time_entries                  time_entries[]
  time_tasks                    time_tasks[]
  user_balances                 user_balances?
  teams                         teams?                 @relation(fields: [teamId], references: [id])
}

enum BillStatus {
  CALCULATED
  PAID
  OVERDUE
}

enum Role {
  USER
  ADMIN
}

enum TimeTaskStatus {
  ACTIVE
  DONE
  ARCHIVED
}

enum TransactionType {
  PAYMENT
  BILL_CHARGE
  ADJUSTMENT
}

enum UserRole {
  USER
  ADMIN
}
