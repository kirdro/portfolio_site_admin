name: üê≥ Docker Deploy to Admin Panel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: kirdro-portfolio-admin
  DOCKER_TAG: latest
  CONTAINER_NAME: kirdro-portfolio-admin

jobs:
  # –≠—Ç–∞–ø 1: TypeScript –∏ –ª–∏–Ω—Ç–∏–Ω–≥
  typecheck:
    name: ‚ö° TypeScript Check (Admin)
    runs-on: ubuntu-latest
    
    steps:
      - name: üìö Checkout
        uses: actions/checkout@v4

      - name: üèó Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üì¶ Install dependencies
        run: bun install

      - name: üîç TypeScript check
        run: bun run typecheck

      - name: üßπ Lint check
        run: SKIP_ENV_VALIDATION=1 bun run lint || echo "Lint warnings detected but continuing..."

  # –≠—Ç–∞–ø 2: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
  docker-build:
    name: üê≥ Docker Build (Admin)
    runs-on: ubuntu-latest
    needs: typecheck
    
    steps:
      - name: üìö Checkout
        uses: actions/checkout@v4

      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üê≥ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üóúÔ∏è Save Docker image
        run: |
          echo "üíæ Saving Docker image to tar archive..."
          docker save ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} | gzip > kirdro-admin-docker-image.tar.gz
          echo "üìä Archive size:"
          ls -lh kirdro-admin-docker-image.tar.gz

      - name: üì§ Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-admin
          path: kirdro-admin-docker-image.tar.gz
          retention-days: 1

  # –≠—Ç–∞–ø 3: Docker –î–µ–ø–ª–æ–π
  docker-deploy:
    name: üê≥ Docker Deploy to Admin Panel
    runs-on: ubuntu-latest
    needs: [typecheck, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: admin
    
    steps:
      - name: üì• Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-admin
          path: .

      - name: üîê Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.ADMIN_DEPLOY_KEY }}

      - name: üê≥ Deploy Docker to Admin server
        run: |
          echo "üê≥ Starting Docker deployment to Admin server..."
          
          # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          scp -o StrictHostKeyChecking=no kirdro-admin-docker-image.tar.gz ${{ secrets.ADMIN_DEPLOY_USER }}@${{ secrets.ADMIN_DEPLOY_HOST }}:/tmp/

          # Docker deployment –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          ssh -o StrictHostKeyChecking=no ${{ secrets.ADMIN_DEPLOY_USER }}@${{ secrets.ADMIN_DEPLOY_HOST }} '
            set -e
            
            echo "üê≥ Starting Docker deployment on Admin server..."
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ Docker –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            cd /var/docker/kirdro-admin
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫ –∏ –ø–∞–º—è—Ç—å
            echo "üíæ Checking disk space..."
            df -h /var/docker/
            echo "üß† Checking available memory..."
            free -h
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π Docker –æ–±—Ä–∞–∑
            echo "üì• Loading Docker image..."
            docker load -i /tmp/kirdro-admin-docker-image.tar.gz
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            echo "üõë Stopping old Admin container..."
            if docker ps -a --format "table {{.Names}}" | grep -q "^${{ env.CONTAINER_NAME }}$"; then
              docker stop ${{ env.CONTAINER_NAME }} || true
              docker rm ${{ env.CONTAINER_NAME }} || true
              echo "‚úÖ Old Admin container removed"
            fi
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            echo "üöÄ Starting new Admin Docker container..."
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p 127.0.0.1:3005:3005 \
              --env-file .env.admin \
              --memory="1g" \
              --cpus="1.0" \
              --health-cmd="curl -f http://localhost:3005/api/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --health-start-period=60s \
              ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            
            echo "‚úÖ New Admin container started successfully!"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "üîç Running Admin containers:"
            docker ps | grep kirdro-admin || echo "‚ùå Admin Container not found in ps"
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            echo "üìã Container startup logs:"
            timeout 30s docker logs ${{ env.CONTAINER_NAME }} || echo "Timeout waiting for logs"
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
            echo "üßπ Cleaning old Docker images..."
            docker image prune -f
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            rm -f /tmp/kirdro-admin-docker-image.tar.gz
            
            echo "üéâ Admin Docker deployment completed successfully!"
          '

      - name: üîç Admin Health Check
        run: |
          echo "‚è≥ Waiting for Admin container startup..."
          sleep 45
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint —á–µ—Ä–µ–∑ HTTP
          echo "ü©∫ Checking Admin API health endpoint..."
          for i in {1..8}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://admin.kirdro.ru/api/health || echo "000")
            if [ "$response" = "200" ]; then
              echo "‚úÖ Admin API Health check passed (HTTP $response)"
              exit 0
            else
              echo "‚è≥ Admin API Health attempt $i: HTTP $response, retrying in 15s..."
              sleep 15
            fi
          done
          
          echo "‚ùå Admin API Health check failed after all attempts"
          echo "üîç Let's check container status..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.ADMIN_DEPLOY_USER }}@${{ secrets.ADMIN_DEPLOY_HOST }} "docker ps | grep kirdro-admin && echo '--- Container logs ---' && docker logs kirdro-portfolio-admin --tail 50"
          exit 1

  # –≠—Ç–∞–ø 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    name: üì¢ Admin Deployment Notifications  
    runs-on: ubuntu-latest
    needs: [docker-deploy]
    if: always()
    steps:
      - name: üéâ Success Notification
        if: needs.docker-deploy.result == 'success'
        run: echo "üéâ Admin panel deployment to https://admin.kirdro.ru completed successfully! üê≥"
        
      - name: üí• Failure Notification  
        if: needs.docker-deploy.result == 'failure'
        run: echo "üí• Admin panel deployment failed! Check the logs and container status."