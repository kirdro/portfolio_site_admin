name: üöÄ Deploy Admin Panel to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  typecheck:
    name: üîç TypeScript Check
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üçû Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: üì¶ Install dependencies
      run: bun install
    
    - name: üèó Generate Prisma client
      run: bunx prisma generate
      env:
        DATABASE_URL: ${{ secrets.ADMIN_DATABASE_URL }}
    
    - name: üîç Type checking
      run: bun run typecheck
    
    - name: üßπ Linting (continue on warning)
      run: bun run lint || true

  build:
    name: üèó Build Admin Panel
    runs-on: ubuntu-latest
    needs: typecheck
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üçû Setup Bun  
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: üì¶ Install dependencies
      run: bun install
    
    - name: üèó Generate Prisma client
      run: bunx prisma generate
      env:
        DATABASE_URL: ${{ secrets.ADMIN_DATABASE_URL }}
    
    - name: üèó Build Next.js application
      run: bunx next build
      env:
        DATABASE_URL: ${{ secrets.ADMIN_DATABASE_URL }}
        NEXTAUTH_SECRET: ${{ secrets.ADMIN_NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.ADMIN_NEXTAUTH_URL }}
        AUTH_TRUST_HOST: ${{ secrets.ADMIN_AUTH_TRUST_HOST }}
        AUTH_YANDEX_ID: ${{ secrets.ADMIN_AUTH_YANDEX_ID }}
        AUTH_YANDEX_SECRET: ${{ secrets.ADMIN_AUTH_YANDEX_SECRET }}
        EMAIL_SERVER_HOST: ${{ secrets.ADMIN_EMAIL_SERVER_HOST }}
        EMAIL_SERVER_PORT: ${{ secrets.ADMIN_EMAIL_SERVER_PORT }}
        EMAIL_SERVER_USER: ${{ secrets.ADMIN_EMAIL_SERVER_USER }}
        EMAIL_SERVER_PASSWORD: ${{ secrets.ADMIN_EMAIL_SERVER_PASSWORD }}
        EMAIL_FROM: ${{ secrets.ADMIN_EMAIL_FROM }}
        GROQ_API_KEY: ${{ secrets.ADMIN_GROQ_API_KEY }}
        GROQ_MODEL: ${{ secrets.ADMIN_GROQ_MODEL }}
        AI_PROVIDER: ${{ secrets.ADMIN_AI_PROVIDER }}
        PORT: ${{ secrets.ADMIN_PORT }}
    
    - name: üì¶ Create deployment package
      run: |
        mkdir -p deploy
        
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è:"
        ls -la
        
        # –ö–æ–ø–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        if [ -d ".next" ]; then
          cp -r .next deploy/
          echo "‚úÖ .next —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
        else
          echo "‚ùå .next –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        fi
        
        if [ -d "public" ]; then
          cp -r public deploy/
          echo "‚úÖ public —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
        else
          echo "‚ö†Ô∏è public –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
        fi
        
        if [ -f "package.json" ]; then
          cp package.json deploy/
          echo "‚úÖ package.json —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
        else
          echo "‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        fi
        
        # –ö–æ–ø–∏—Ä—É–µ–º lockfile
        if [ -f "bun.lock" ]; then
          cp bun.lock deploy/
          echo "‚úÖ bun.lock —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
        elif [ -f "yarn.lock" ]; then
          cp yarn.lock deploy/
          echo "‚úÖ yarn.lock —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
        elif [ -f "package-lock.json" ]; then
          cp package-lock.json deploy/
          echo "‚úÖ package-lock.json —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
        else
          echo "‚ö†Ô∏è Lockfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        if [ -d "prisma" ]; then
          cp -r prisma deploy/
          echo "‚úÖ prisma —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
        else
          echo "‚ùå prisma –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        fi
        
        if [ -f "ecosystem.admin.config.cjs" ]; then
          cp ecosystem.admin.config.cjs deploy/
          echo "‚úÖ ecosystem.admin.config.cjs —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
        else
          echo "‚ùå ecosystem.admin.config.cjs –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        fi
        
        echo "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ deploy:"
        ls -la deploy/
        
    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: admin-build
        path: deploy/
        retention-days: 1

  deploy:
    name: üöÄ Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: admin-build
        path: ./deploy
    
    - name: üîë Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.ADMIN_DEPLOY_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.ADMIN_DEPLOY_HOST }} >> ~/.ssh/known_hosts
    
    - name: üöÄ Deploy to server
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ deploy –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ deploy –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
        ls -la deploy/
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
        cd deploy
        echo "–°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤..."
        tar -czf ../admin-deploy.tar.gz .
        cd ..
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–ª—Å—è
        if [ -f "admin-deploy.tar.gz" ]; then
          echo "‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä: $(du -h admin-deploy.tar.gz | cut -f1)"
        else
          echo "‚ùå –û—à–∏–±–∫–∞: –∞—Ä—Ö–∏–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω!"
          exit 1
        fi
        
        # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        echo "–ö–æ–ø–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
        scp -o StrictHostKeyChecking=no -v admin-deploy.tar.gz ${{ secrets.ADMIN_DEPLOY_USER }}@${{ secrets.ADMIN_DEPLOY_HOST }}:/tmp/
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        ssh -o StrictHostKeyChecking=no ${{ secrets.ADMIN_DEPLOY_USER }}@${{ secrets.ADMIN_DEPLOY_HOST }} "ls -la /tmp/admin-deploy.tar.gz"
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ë–ï–ó /tmp)
        ssh -o StrictHostKeyChecking=no ${{ secrets.ADMIN_DEPLOY_USER }}@${{ secrets.ADMIN_DEPLOY_HOST }} << 'EOF'
          set -e
          
          # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2)
          echo "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã..."
          find /var/www -name "admin.kirdro.ru.backup.*" -type d | sort | head -n -2 | xargs -r sudo rm -rf
          
          # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏ var/tmp (–ù–ï —Ç—Ä–æ–≥–∞–µ–º /tmp)
          echo "–û—á–∏—â–∞–µ–º –∫–µ—à –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ /tmp)..."
          sudo rm -rf /var/tmp/* 2>/dev/null || true
          
          # –û—á–∏—Å—Ç–∫–∞ node_modules –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
          echo "–û—á–∏—â–∞–µ–º node_modules –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö..."
          find /var/www -name "node_modules" -type d ! -path "*/admin.kirdro.ru/*" | head -5 | xargs -r sudo rm -rf
          
          # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
          echo "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏..."
          find /var/log -name "*.log" -mtime +7 -exec sudo rm {} \; 2>/dev/null || true
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
          echo "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:"
          df -h /
        EOF
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        ssh -o StrictHostKeyChecking=no ${{ secrets.ADMIN_DEPLOY_USER }}@${{ secrets.ADMIN_DEPLOY_HOST }} << 'EOF'
          set -e
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ö–∏–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          if [ ! -f "/tmp/admin-deploy.tar.gz" ]; then
            echo "‚ùå –û—à–∏–±–∫–∞: –∞—Ä—Ö–∏–≤ /tmp/admin-deploy.tar.gz –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"
            exit 1
          fi
          
          echo "üì¶ –ê—Ä—Ö–∏–≤ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Ä–∞–∑–º–µ—Ä: $(du -h /tmp/admin-deploy.tar.gz | cut -f1)"
          
          # Backup –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
          if [ -d "/var/www/admin.kirdro.ru" ]; then
            sudo cp -r /var/www/admin.kirdro.ru /var/www/admin.kirdro.ru.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
          fi
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          sudo mkdir -p /var/www/admin.kirdro.ru
          sudo chown -R $USER:$USER /var/www/admin.kirdro.ru
          
          # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
          cd /var/www/admin.kirdro.ru
          find . -mindepth 1 -delete 2>/dev/null || true
          
          # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
          echo "üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤..."
          tar -xzf /tmp/admin-deploy.tar.gz -C /var/www/admin.kirdro.ru/
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
          echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏:"
          ls -la
          
          # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª —Å –ø—Ä–æ–¥–∞–∫—à–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
          cat > /var/www/admin.kirdro.ru/.env << 'ENVEOF'
        DATABASE_URL="${{ secrets.ADMIN_DATABASE_URL }}"
        NEXTAUTH_SECRET="${{ secrets.ADMIN_NEXTAUTH_SECRET }}"
        NEXTAUTH_URL="${{ secrets.ADMIN_NEXTAUTH_URL }}"
        AUTH_SECRET="${{ secrets.ADMIN_AUTH_SECRET }}"
        AUTH_TRUST_HOST="${{ secrets.ADMIN_AUTH_TRUST_HOST }}"
        AUTH_YANDEX_ID="${{ secrets.ADMIN_AUTH_YANDEX_ID }}"
        AUTH_YANDEX_SECRET="${{ secrets.ADMIN_AUTH_YANDEX_SECRET }}"
        EMAIL_SERVER_HOST="${{ secrets.ADMIN_EMAIL_SERVER_HOST }}"
        EMAIL_SERVER_PORT="${{ secrets.ADMIN_EMAIL_SERVER_PORT }}"
        EMAIL_SERVER_USER="${{ secrets.ADMIN_EMAIL_SERVER_USER }}"
        EMAIL_SERVER_PASSWORD="${{ secrets.ADMIN_EMAIL_SERVER_PASSWORD }}"
        EMAIL_FROM="${{ secrets.ADMIN_EMAIL_FROM }}"
        GROQ_API_KEY="${{ secrets.ADMIN_GROQ_API_KEY }}"
        GROQ_MODEL="${{ secrets.ADMIN_GROQ_MODEL }}"
        AI_PROVIDER="${{ secrets.ADMIN_AI_PROVIDER }}"
        NODE_ENV=production
        PORT=3004
        ENVEOF
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
          cd /var/www/admin.kirdro.ru
          export HOME=/home/$USER
          
          # –û—á–∏—â–∞–µ–º –∫–µ—à bun –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
          rm -rf ~/.cache/bun 2>/dev/null || true
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–µ–∑ –∫–µ—à–∞
          bun install --production --no-cache
          
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
          export DATABASE_URL="${{ secrets.ADMIN_DATABASE_URL }}"
          bunx prisma generate
          
          # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
          sudo chown -R $USER:$USER /var/www/admin.kirdro.ru
          chmod 600 .env
          
          # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ PM2
          pm2 reload admin-kirdro-portfolio || pm2 start ecosystem.admin.config.cjs
          
          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          sleep 10
          
          # Cleanup –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          rm -f /tmp/admin-deploy.tar.gz
          
          # –û—á–∏—Å—Ç–∫–∞ /tmp —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
          echo "–û—á–∏—â–∞–µ–º /tmp (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)..."
          find /tmp -type f -name "*.tar.gz" -delete 2>/dev/null || true
          find /tmp -type f -name "*.tmp" -delete 2>/dev/null || true
          find /tmp -type f -name "*.log" -delete 2>/dev/null || true
          
          # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ npm/bun –µ—Å–ª–∏ –µ—Å—Ç—å
          rm -rf ~/.cache/bun 2>/dev/null || true
          rm -rf ~/.npm/_cacache 2>/dev/null || true
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
          echo "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:"
          df -h /
          
          echo "‚úÖ –î–µ–ø–ª–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        EOF

  health-check:
    name: ü©∫ Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üè• Check API Health
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º health check API..."
        
        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        sleep 15
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API health endpoint
        for i in {1..5}; do
          echo "–ü–æ–ø—ã—Ç–∫–∞ $i/5..."
          if curl -f -s "https://admin.kirdro.ru/api/health" > /tmp/health.json; then
            echo "‚úÖ Health check API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
            cat /tmp/health.json | jq '.'
            break
          else
            echo "‚ùå Health check –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥..."
            sleep 10
          fi
          
          if [ $i -eq 5 ]; then
            echo "üö® Health check –Ω–µ –ø—Ä–æ—à–µ–ª –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫!"
            exit 1
          fi
        done
    
    - name: üåê Check Main Page
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if curl -f -s -I "https://admin.kirdro.ru/" | grep "200 OK"; then
          echo "‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!"
        else
          echo "‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!"
          
          # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:"
          ssh -o StrictHostKeyChecking=no ${{ secrets.ADMIN_DEPLOY_USER }}@${{ secrets.ADMIN_DEPLOY_HOST }} << 'EOF'
            echo "PM2 —Å—Ç–∞—Ç—É—Å:"
            pm2 status admin-kirdro-portfolio
            echo "–õ–æ–≥–∏ PM2:"
            pm2 logs admin-kirdro-portfolio --lines 20
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 3004:"
            netstat -tlnp | grep :3004
          EOF
          
          exit 1
        fi
    
    - name: üéâ Success Notification
      run: |
        echo "üéâ –î–µ–ø–ª–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ admin.kirdro.ru —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        echo "üåê –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://admin.kirdro.ru"
        echo "ü©∫ Health Check: https://admin.kirdro.ru/api/health"