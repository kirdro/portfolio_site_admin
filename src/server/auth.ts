import { type NextAuthOptions } from "next-auth";
import { PrismaAdapter } from "@next-auth/prisma-adapter";
import EmailProvider from "next-auth/providers/email";
import { PrismaClient } from "../generated/prisma";

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç —Å —Å–∏–Ω–≥–ª—Ç–æ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
export const prisma = globalForPrisma.prisma ?? new PrismaClient();
export const db = prisma; // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;

// Yandex OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–∫–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è) —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const YandexProvider = {
  id: "yandex",
  name: "Yandex",
  type: "oauth" as const,
  authorization: {
    url: "https://oauth.yandex.ru/authorize",
    params: {
      scope: "login:email login:info",
      response_type: "code",
    },
  },
  token: "https://oauth.yandex.ru/token",
  userinfo: "https://login.yandex.ru/info?format=json",
  clientId: process.env.AUTH_YANDEX_ID!,
  clientSecret: process.env.AUTH_YANDEX_SECRET!,
  profile(profile: any) {
    console.log("üîç Yandex profile received:", JSON.stringify(profile, null, 2));
    const result = {
      id: profile.id,
      name: profile.display_name || profile.real_name,
      email: profile.default_email,
      image: profile.is_avatar_empty ? null : `https://avatars.yandex.net/get-yapic/${profile.default_avatar_id}/islands-200`,
    };
    console.log("‚ú® Processed profile:", JSON.stringify(result, null, 2));
    return result;
  },
};

export const authOptions: NextAuthOptions = {
  // –ü–û–õ–ù–û–°–¢–¨–Æ —É–±–∏—Ä–∞–µ–º Prisma –∞–¥–∞–ø—Ç–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ JWT
  // adapter: PrismaAdapter(prisma),
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
  session: {
    strategy: "jwt",
    maxAge: 24 * 60 * 60, // 24 —á–∞—Å–∞
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
  jwt: {
    maxAge: 24 * 60 * 60, // 24 —á–∞—Å–∞
  },
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  events: {
    async signIn({ user, account, profile, isNewUser }) {
      console.log(`üìÖ SignIn event: ${user.email} via ${account?.provider}`);
    },
    async signOut({ session, token }) {
      console.log(`üëã SignOut event: ${token?.email}`);
    },
    async createUser({ user }) {
      console.log(`üë§ New user created: ${user.email}`);
    },
    async updateUser({ user }) {
      console.log(`üîÑ User updated: ${user.email}`);
    },
    async linkAccount({ user, account, profile }) {
      console.log(`üîó Account linked: ${user.email} -> ${account.provider}`);
    },
    async session({ session, token }) {
      console.log(`üìã Session accessed: ${token?.email}`);
    },
  },
  
  // –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  providers: [
    // –¢–æ–ª—å–∫–æ –Ø–Ω–¥–µ–∫—Å OAuth –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (Email –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
    YandexProvider as any,
    
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù: Email –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–æ—Ä–º–æ–∑–∏—Ç OAuth –ø—Ä–æ—Ü–µ—Å—Å
    // EmailProvider({
    //   server: {
    //     host: process.env.EMAIL_SERVER_HOST!,
    //     port: Number(process.env.EMAIL_SERVER_PORT!),
    //     auth: {
    //       user: process.env.EMAIL_SERVER_USER!,
    //       pass: process.env.EMAIL_SERVER_PASSWORD!,
    //     },
    //   },
    //   from: process.env.EMAIL_FROM!,
    // }),
  ],
  
  // Callbacks –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ –∏ JWT —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  callbacks: {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è kirdro@yandex.ru
    async signIn({ user, account, profile }) {
      const startTime = Date.now();
      console.log(`üîê SignIn callback started for: ${user?.email}`);
      console.log(`üìã Account provider: ${account?.provider}`);
      console.log(`üë§ User data:`, JSON.stringify(user, null, 2));
      
      try {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¢–û–õ–¨–ö–û –¥–ª—è kirdro@yandex.ru
        if (user.email !== "kirdro@yandex.ru") {
          console.log(`‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –¥–ª—è: ${user.email}`);
          return false;
        }
        
        console.log(`‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –¥–ª—è: ${user.email} (${Date.now() - startTime}ms)`);
        return true;
      } catch (error) {
        console.error(`üí• SignIn callback error:`, error);
        return false;
      }
    },
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    async jwt({ token, user, account }) {
      const startTime = Date.now();
      console.log(`üé´ JWT callback started for: ${token?.email || user?.email}`);
      
      try {
        if (user) {
          console.log(`üîç Setting role for: ${user.email}`);
          
          // –£–ü–†–û–©–ï–ù–ù–û: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ë–î, –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
          token.role = user.email === "kirdro@yandex.ru" ? "ADMIN" : "USER";
          console.log(`üé≠ Role assigned: ${token.role} (fast mode)`);
        }
        
        console.log(`‚ú® JWT callback completed (${Date.now() - startTime}ms)`);
        return token;
      } catch (error) {
        console.error(`üí• JWT callback error:`, error);
        return token;
      }
    },
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async session({ session, token }) {
      const startTime = Date.now();
      console.log(`üìù Session callback started for: ${token?.email}`);
      
      try {
        if (token) {
          session.user.id = token.sub!;
          session.user.role = token.role as string;
        }
        
        console.log(`‚ú® Session callback completed (${Date.now() - startTime}ms)`);
        console.log(`üé™ Final session:`, JSON.stringify(session, null, 2));
        return session;
      } catch (error) {
        console.error(`üí• Session callback error:`, error);
        return session;
      }
    },
  },
  
  // –°—Ç—Ä–∞–Ω–∏—Ü—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  pages: {
    signIn: "/auth/signin",
    error: "/auth/error",
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ cookies
  cookies: {
    sessionToken: {
      name: "next-auth.session-token",
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: process.env.NODE_ENV === "production",
        domain: process.env.NODE_ENV === "production" ? ".kirdro.ru" : undefined,
      },
    },
    state: {
      name: "next-auth.state",
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: process.env.NODE_ENV === "production",
        maxAge: 900, // 15 minutes
      },
    },
    pkceCodeVerifier: {
      name: "next-auth.pkce.code_verifier",
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: process.env.NODE_ENV === "production",
        maxAge: 900,
      },
    },
  },
  
  // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
  secret: process.env.NEXTAUTH_SECRET,
};

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      name?: string | null;
      email?: string | null;
      image?: string | null;
      role: string;
    };
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    role?: string;
  }
}