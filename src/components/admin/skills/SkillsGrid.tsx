'use client';

import React from 'react';
import { SkillCard } from './SkillCard';
import type { SkillData } from '../../../app/(dashboard)/skills/page';

interface SkillsGridProps {
	skills: SkillData[];
	loading: boolean;
	onSkillClick: (skill: SkillData) => void;
	onCreateSkill: () => void;
	onDeleteSkill?: (skill: SkillData) => void;
}

/**
 * –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è CSS Grid —Å–µ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç CSS Grid –Ω–∞–¥ Flexbox —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
 */
export function SkillsGrid({
	skills,
	loading,
	onSkillClick,
	onCreateSkill,
	onDeleteSkill,
}: SkillsGridProps) {
	// Loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–∫–µ–ª–µ—Ç–æ–Ω–∞–º–∏
	if (loading) {
		return (
			<div className='bg-panel border border-line rounded-lg bevel p-6'>
				<div className='space-y-6'>
					{Array.from({ length: 3 }).map((_, categoryIndex) => (
						<div
							key={categoryIndex}
							className='space-y-4'
						>
							<div className='h-6 bg-subtle rounded w-32 animate-pulse' />
							<div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4'>
								{Array.from({ length: 4 }).map((_, index) => (
									<div
										key={index}
										className='animate-pulse'
									>
										<div className='h-24 bg-subtle rounded-lg mb-2' />
										<div className='h-4 bg-subtle rounded mb-1' />
										<div className='h-3 bg-subtle rounded w-2/3' />
									</div>
								))}
							</div>
						</div>
					))}
				</div>
			</div>
		);
	}

	// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	const skillsByCategories = skills.reduce(
		(groups, skill) => {
			if (!groups[skill.category]) {
				groups[skill.category] = [];
			}
			groups[skill.category]?.push(skill);
			return groups;
		},
		{} as Record<string, SkillData[]>,
	);

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é (—É–±—ã–≤–∞–Ω–∏–µ)
	Object.keys(skillsByCategories).forEach((category) => {
		skillsByCategories[category]?.sort((a, b) => b.level - a.level);
	});

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –Ω–∞–≤—ã–∫–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
	const sortedCategories = Object.keys(skillsByCategories).sort((a, b) => {
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: Frontend, Backend, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
		const priority: Record<string, number> = {
			'Frontend': 1,
			'Backend': 2,
		};
		return (priority[a] || 999) - (priority[b] || 999) || a.localeCompare(b);
	});

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	const getCategoryIcon = (category: string): string => {
		const icons: Record<string, string> = {
			'Frontend': 'üé®',
			'Backend': '‚öôÔ∏è',
			'DevOps & Tools': 'üöÄ',
			'DevOps': 'üöÄ',
			'–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'üõ†Ô∏è',
			'Tools': 'üõ†Ô∏è',
		};
		return icons[category] || 'üí°';
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	const getCategoryColor = (category: string): string => {
		const colors: Record<string, string> = {
			'Frontend': 'neon',
			'Backend': 'cyan',
			'DevOps & Tools': 'purple-400',
			'DevOps': 'purple-400',
			'–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'yellow-400',
			'Tools': 'yellow-400',
		};
		return colors[category] || 'orange-400';
	};

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if (skills.length === 0) {
		return (
			<div className='bg-panel border border-line rounded-lg bevel p-12 text-center'>
				<div className='text-6xl mb-4'>‚ö°</div>
				<h3 className='text-xl font-bold text-base mb-2'>
					–ù–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
				</h3>
				<p className='text-soft mb-6'>
					–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
				</p>
				<button
					onClick={onCreateSkill}
					className='px-6 py-3 bg-neon/20 border border-neon text-neon
                   hover:bg-neon/30 hover:shadow-neon rounded-md font-medium
                   bevel transition-all duration-300'
				>
					‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫
				</button>
			</div>
		);
	}

	return (
		<div className='bg-panel border border-line rounded-lg bevel p-6'>
			<div className='space-y-8'>
				{sortedCategories.map((category) => {
					const skillsInCategory = skillsByCategories[category];
					const categoryColor = getCategoryColor(category);
					const icon = getCategoryIcon(category);

					if (!skillsInCategory || skillsInCategory.length === 0)
						return null;

					return (
						<div
							key={category}
							className='space-y-4'
						>
							{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
							<div className='flex items-center justify-between'>
								<div className='flex items-center space-x-3'>
									<div className='text-2xl'>{icon}</div>
									<h3
										className={`text-lg font-bold text-${categoryColor} glyph-glow`}
									>
										{category}
									</h3>
									<div className='text-sm text-soft'>
										({skillsInCategory.length} –Ω–∞–≤—ã–∫
										{skillsInCategory.length === 1 ?
											''
										: skillsInCategory.length < 5 ?
											'–∞'
										:	'–æ–≤'}
										)
									</div>
								</div>

								{/* –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
								<div className='flex items-center space-x-2'>
									<span className='text-xs text-soft'>
										–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å:
									</span>
									<span
										className={`text-sm font-bold text-${categoryColor}`}
									>
										{Math.round(
											skillsInCategory.reduce(
												(sum, s) => sum + s.level,
												0,
											) / skillsInCategory.length,
										)}
										%
									</span>
								</div>
							</div>

							{/* CSS Grid —Å–µ—Ç–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ */}
							<div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4'>
								{skillsInCategory.map((skill) => (
									<SkillCard
										key={skill.id}
										skill={skill}
										onClick={onSkillClick}
										onDelete={onDeleteSkill}
										categoryColor={categoryColor}
									/>
								))}
							</div>
						</div>
					);
				})}

				{/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞ */}
				<div className='border-t border-line pt-6'>
					<div
						onClick={onCreateSkill}
						className='h-24 bg-subtle/50 border-2 border-dashed border-line
                     hover:border-neon hover:bg-neon/5 rounded-lg
                     flex flex-col items-center justify-center
                     cursor-pointer transition-all duration-300 group'
					>
						<div className='text-2xl mb-2 text-soft group-hover:text-neon transition-colors'>
							‚ûï
						</div>
						<div className='text-sm text-soft group-hover:text-neon transition-colors'>
							–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}
