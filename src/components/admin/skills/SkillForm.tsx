"use client";

import React, { useState, useCallback } from "react";
import { z } from "zod";
import type { SkillData } from "../../../app/(dashboard)/skills/page";
import { api } from "../../../utils/api";
import { FileUpload } from "../../ui/FileUpload";

interface SkillFormProps {
  skill?: SkillData | null;
  isCreating: boolean;
  onClose: () => void;
  onSave: () => void;
}

// Zod —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–∞
const skillSchema = z.object({
  name: z.string().min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ").max(50, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"),
  category: z.enum(["Frontend", "Backend", "DevOps", "Tools", "Other"], {
    message: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
  }),
  level: z.number().min(1, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: 1%").max(100, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: 100%"),
  icon: z.string().min(1, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É").max(10, "–ò–∫–æ–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è"),
});

/**
 * –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —Å–ª–∞–π–¥–µ—Ä–∞ —É—Ä–æ–≤–Ω—è –∏ –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–∫–∏
 */
export function SkillForm({ skill, isCreating, onClose, onSave }: SkillFormProps) {
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º tRPC –º—É—Ç–∞—Ü–∏–∏
  const createMutation = api.admin.skills.create.useMutation({
    onSuccess: () => {
      onSave();
    },
    onError: (error) => {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞:", error);
      alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  const updateMutation = api.admin.skills.update.useMutation({
    onSuccess: () => {
      onSave();
    },
    onError: (error) => {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞:", error);
      alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    name: skill?.name || "",
    category: skill?.category || "Frontend" as const,
    level: skill?.level || 50,
    icon: skill?.icon || "‚ö°",
  });
  
  const [useCustomIcon, setUseCustomIcon] = useState(false);

  const [errors, setErrors] = useState<Record<string, string>>({});

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ = [
    { value: "Frontend", label: "Frontend", icon: "üé®" },
    { value: "Backend", label: "Backend", icon: "‚öôÔ∏è" },
    { value: "DevOps", label: "DevOps", icon: "üöÄ" },
    { value: "Tools", label: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", icon: "üõ†Ô∏è" },
    { value: "Other", label: "–î—Ä—É–≥–æ–µ", icon: "üí°" },
  ] as const;

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤
  const –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ–ò–∫–æ–Ω–∫–∏ = [
    "‚öõÔ∏è", "üìò", "üü®", "üî∑", "üü¢", "üî•", "‚ö°", "üíé", 
    "üöÄ", "üõ†Ô∏è", "üê≥", "‚òÅÔ∏è", "üîß", "üìä", "üé®", "üíª",
    "üåê", "üóÑÔ∏è", "üîí", "üì±", "‚≠ê", "üéØ", "üí°", "üèÜ"
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–ò–∑–º–µ–Ω–µ–Ω–∏—è–ü–æ–ª—è = useCallback((field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  }, [errors]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å–§–æ—Ä–º—É = () => {
    try {
      skillSchema.parse(formData);
      setErrors({});
      return true;
    } catch (error) {
      if (error instanceof z.ZodError) {
        const newErrors: Record<string, string> = {};
        (error as any).errors.forEach((err: any) => {
          if (err.path[0]) {
            newErrors[err.path[0] as string] = err.message;
          }
        });
        setErrors(newErrors);
      }
      return false;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–û—Ç–ø—Ä–∞–≤–∫–∏ = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å–§–æ—Ä–º—É()) {
      return;
    }
    
    try {
      if (isCreating) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞
        await createMutation.mutateAsync(formData);
      } else if (skill) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–≤—ã–∫–∞
        await updateMutation.mutateAsync({
          id: skill.id,
          ...formData
        });
      }
    } catch (error) {
      // –û—à–∏–±–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ onError –º—É—Ç–∞—Ü–∏–π
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
    }
  }, [formData, isCreating, skill, createMutation, updateMutation, –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å–§–æ—Ä–º—É]);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —É—Ä–æ–≤–Ω—è
  const –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å–¶–≤–µ—Ç–£—Ä–æ–≤–Ω—è = (level: number) => {
    if (level >= 90) return "text-green-400 bg-green-400";
    if (level >= 70) return "text-yellow-400 bg-yellow-400";
    if (level >= 50) return "text-orange-400 bg-orange-400";
    return "text-red-400 bg-red-400";
  };

  return (
    <div className="fixed inset-0 bg-black/90 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <div className="bg-panel border border-line rounded-lg bevel max-w-2xl w-full max-h-[90vh] overflow-auto shadow-2xl shadow-neon/10">
        <div className="p-6">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã */}
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-neon glyph-glow">
              {isCreating ? "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫" : "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫"}
            </h2>
            <button
              onClick={onClose}
              className="text-soft hover:text-base transition-colors"
            >
              ‚úï
            </button>
          </div>

          <form onSubmit={–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–û—Ç–ø—Ä–∞–≤–∫–∏} className="space-y-6">
            {/* –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ */}
            <div>
              <label className="block text-sm font-medium text-base mb-2">
                –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ *
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–ò–∑–º–µ–Ω–µ–Ω–∏—è–ü–æ–ª—è("name", e.target.value)}
                className={`w-full px-3 py-2 bg-subtle border rounded-md text-base
                           focus:border-neon focus:ring-1 focus:ring-neon transition-colors
                           ${errors.name ? "border-red-500" : "border-line"}`}
                placeholder="React, TypeScript, Docker..."
                maxLength={50}
              />
              {errors.name && (
                <p className="text-red-400 text-sm mt-1">{errors.name}</p>
              )}
            </div>

            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
            <div>
              <label className="block text-sm font-medium text-base mb-2">
                –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
              </label>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-2">
                {–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.map((category) => (
                  <button
                    key={category.value}
                    type="button"
                    onClick={() => –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–ò–∑–º–µ–Ω–µ–Ω–∏—è–ü–æ–ª—è("category", category.value)}
                    className={`p-3 border rounded-md transition-all duration-300 text-center
                               ${formData.category === category.value
                                 ? "border-neon bg-neon/20 text-neon shadow-neon"
                                 : "border-line bg-subtle text-soft hover:border-soft"
                               }`}
                  >
                    <div className="text-xl mb-1">{category.icon}</div>
                    <div className="text-xs">{category.label}</div>
                  </button>
                ))}
              </div>
              {errors.category && (
                <p className="text-red-400 text-sm mt-1">{errors.category}</p>
              )}
            </div>

            {/* –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è */}
            <div>
              <label className="block text-sm font-medium text-base mb-2">
                –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è * ({formData.level}%)
              </label>
              <div className="space-y-3">
                <input
                  type="range"
                  min="1"
                  max="100"
                  value={formData.level}
                  onChange={(e) => –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–ò–∑–º–µ–Ω–µ–Ω–∏—è–ü–æ–ª—è("level", parseInt(e.target.value))}
                  className="w-full h-2 bg-subtle rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-soft">
                  <span>1% (–ù–æ–≤–∏—á–æ–∫)</span>
                  <span className={`font-bold ${–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å–¶–≤–µ—Ç–£—Ä–æ–≤–Ω—è(formData.level).split(' ')[0]} glyph-glow`}>
                    {formData.level >= 90 ? "–≠–∫—Å–ø–µ—Ä—Ç" : 
                     formData.level >= 70 ? "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" :
                     formData.level >= 50 ? "–°—Ä–µ–¥–Ω–∏–π" : "–ù–∞—á–∏–Ω–∞—é—â–∏–π"}
                  </span>
                  <span>100% (–≠–∫—Å–ø–µ—Ä—Ç)</span>
                </div>
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
                <div className="w-full bg-panel rounded-full h-3 border border-line">
                  <div 
                    className={`h-3 rounded-full transition-all duration-500 ${–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å–¶–≤–µ—Ç–£—Ä–æ–≤–Ω—è(formData.level).split(' ')[1]}`}
                    style={{ width: `${formData.level}%` }}
                  />
                </div>
              </div>
              {errors.level && (
                <p className="text-red-400 text-sm mt-1">{errors.level}</p>
              )}
            </div>

            {/* –ò–∫–æ–Ω–∫–∞ */}
            <div>
              <label className="block text-sm font-medium text-base mb-2">
                –ò–∫–æ–Ω–∫–∞ –Ω–∞–≤—ã–∫–∞ *
              </label>
              
              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ –∏–∫–æ–Ω–∫–∏ */}
              <div className="flex gap-4 mb-4">
                <button
                  type="button"
                  onClick={() => setUseCustomIcon(false)}
                  className={`px-3 py-2 rounded border transition-colors ${
                    !useCustomIcon
                      ? "border-neon bg-neon/20 text-neon"
                      : "border-line bg-subtle text-soft hover:border-soft"
                  }`}
                >
                  üé® –≠–º–æ–¥–∑–∏
                </button>
                <button
                  type="button"
                  onClick={() => setUseCustomIcon(true)}
                  className={`px-3 py-2 rounded border transition-colors ${
                    useCustomIcon
                      ? "border-neon bg-neon/20 text-neon"
                      : "border-line bg-subtle text-soft hover:border-soft"
                  }`}
                >
                  üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                </button>
              </div>
              
              {!useCustomIcon ? (
                <div className="space-y-3">
                  {/* –¢–µ–∫—É—â–∞—è –∏–∫–æ–Ω–∫–∞ */}
                  <div className="flex items-center space-x-3 p-3 bg-subtle border border-line rounded-md">
                    <div className="text-3xl">{formData.icon}</div>
                    <div>
                      <div className="text-sm font-medium">–í—ã–±—Ä–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞</div>
                      <div className="text-xs text-soft">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</div>
                    </div>
                  </div>
                  
                  {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ */}
                  <div className="grid grid-cols-8 gap-2">
                    {–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ–ò–∫–æ–Ω–∫–∏.map((icon) => (
                      <button
                        key={icon}
                        type="button"
                        onClick={() => –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–ò–∑–º–µ–Ω–µ–Ω–∏—è–ü–æ–ª—è("icon", icon)}
                        className={`p-2 border rounded-md transition-all duration-300 text-xl
                                   hover:scale-110 active:scale-95
                                   ${formData.icon === icon
                                     ? "border-neon bg-neon/20 text-neon shadow-neon"
                                     : "border-line bg-subtle text-base hover:border-soft"
                                   }`}
                        title={`–í—ã–±—Ä–∞—Ç—å ${icon}`}
                      >
                        {icon}
                      </button>
                    ))}
                  </div>
                </div>
              ) : (
                /* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏ */
                <FileUpload
                  currentFileUrl={formData.icon.startsWith('http') ? formData.icon : ''}
                  onFileUploaded={(url) => –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–ò–∑–º–µ–Ω–µ–Ω–∏—è–ü–æ–ª—è("icon", url)}
                  onFileDeleted={() => –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–ò–∑–º–µ–Ω–µ–Ω–∏—è–ü–æ–ª—è("icon", "‚ö°")}
                  category="skill"
                  acceptedTypes="image/*,.svg"
                  maxSize={1 * 1024 * 1024}
                  preview={true}
                />
              )}
              {errors.icon && (
                <p className="text-red-400 text-sm mt-1">{errors.icon}</p>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex gap-3 pt-4">
              <button
                type="submit"
                disabled={createMutation.isPending || updateMutation.isPending}
                className="flex-1 px-4 py-2 bg-neon/20 border border-neon text-neon
                         hover:bg-neon/30 hover:shadow-neon rounded-md font-medium
                         disabled:opacity-50 disabled:cursor-not-allowed
                         bevel transition-all duration-300"
              >
                {(createMutation.isPending || updateMutation.isPending) ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : (isCreating ? "–°–æ–∑–¥–∞—Ç—å" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")}
              </button>
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 bg-subtle border border-line text-base
                         hover:border-soft rounded-md
                         transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}